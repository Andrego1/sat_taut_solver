-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.12 from Parser.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parse -> Exp                                (0)
	Exp -> Exp "<->" Exp                               (1)
	Exp -> Exp "->" Exp                                (2)
	Exp -> Exp "||" Exp                                (3)
	Exp -> Exp "&&" Exp                                (4)
	Exp -> "(" Exp ")"                                 (5)
	Exp -> "!" Exp                                     (6)
	Exp -> var                                         (7)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	var            { VAR $$ }
	"("            { LPAR }
	")"            { RPAR }
	"&&"           { AND }
	"||"           { OR }
	"!"            { NEG }
	"->"           { IMP }
	"<->"          { BIC }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parse    rule  0
	Exp             rules 1, 2, 3, 4, 5, 6, 7

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	var            shift, and enter state 3
	"("            shift, and enter state 4
	"!"            shift, and enter state 5

	Exp            goto state 6

State 1


	var            shift, and enter state 3
	"("            shift, and enter state 4
	"!"            shift, and enter state 5

	Exp            goto state 2

State 2

	Exp -> Exp . "<->" Exp                              (rule 1)
	Exp -> Exp . "->" Exp                               (rule 2)
	Exp -> Exp . "||" Exp                               (rule 3)
	Exp -> Exp . "&&" Exp                               (rule 4)

	"&&"           shift, and enter state 7
	"||"           shift, and enter state 8
	"->"           shift, and enter state 9
	"<->"          shift, and enter state 10


State 3

	Exp -> var .                                        (rule 7)

	")"            reduce using rule 7
	"&&"           reduce using rule 7
	"||"           reduce using rule 7
	"->"           reduce using rule 7
	"<->"          reduce using rule 7
	%eof           reduce using rule 7


State 4

	Exp -> "(" . Exp ")"                                (rule 5)

	var            shift, and enter state 3
	"("            shift, and enter state 4
	"!"            shift, and enter state 5

	Exp            goto state 12

State 5

	Exp -> "!" . Exp                                    (rule 6)

	var            shift, and enter state 3
	"("            shift, and enter state 4
	"!"            shift, and enter state 5

	Exp            goto state 11

State 6

	%start_parse -> Exp .                               (rule 0)
	Exp -> Exp . "<->" Exp                              (rule 1)
	Exp -> Exp . "->" Exp                               (rule 2)
	Exp -> Exp . "||" Exp                               (rule 3)
	Exp -> Exp . "&&" Exp                               (rule 4)

	"&&"           shift, and enter state 7
	"||"           shift, and enter state 8
	"->"           shift, and enter state 9
	"<->"          shift, and enter state 10
	%eof           accept


State 7

	Exp -> Exp "&&" . Exp                               (rule 4)

	var            shift, and enter state 3
	"("            shift, and enter state 4
	"!"            shift, and enter state 5

	Exp            goto state 17

State 8

	Exp -> Exp "||" . Exp                               (rule 3)

	var            shift, and enter state 3
	"("            shift, and enter state 4
	"!"            shift, and enter state 5

	Exp            goto state 16

State 9

	Exp -> Exp "->" . Exp                               (rule 2)

	var            shift, and enter state 3
	"("            shift, and enter state 4
	"!"            shift, and enter state 5

	Exp            goto state 15

State 10

	Exp -> Exp "<->" . Exp                              (rule 1)

	var            shift, and enter state 3
	"("            shift, and enter state 4
	"!"            shift, and enter state 5

	Exp            goto state 14

State 11

	Exp -> Exp . "<->" Exp                              (rule 1)
	Exp -> Exp . "->" Exp                               (rule 2)
	Exp -> Exp . "||" Exp                               (rule 3)
	Exp -> Exp . "&&" Exp                               (rule 4)
	Exp -> "!" Exp .                                    (rule 6)

	")"            reduce using rule 6
	"&&"           reduce using rule 6
	"||"           reduce using rule 6
	"->"           reduce using rule 6
	"<->"          reduce using rule 6
	%eof           reduce using rule 6


State 12

	Exp -> Exp . "<->" Exp                              (rule 1)
	Exp -> Exp . "->" Exp                               (rule 2)
	Exp -> Exp . "||" Exp                               (rule 3)
	Exp -> Exp . "&&" Exp                               (rule 4)
	Exp -> "(" Exp . ")"                                (rule 5)

	")"            shift, and enter state 13
	"&&"           shift, and enter state 7
	"||"           shift, and enter state 8
	"->"           shift, and enter state 9
	"<->"          shift, and enter state 10


State 13

	Exp -> "(" Exp ")" .                                (rule 5)

	")"            reduce using rule 5
	"&&"           reduce using rule 5
	"||"           reduce using rule 5
	"->"           reduce using rule 5
	"<->"          reduce using rule 5
	%eof           reduce using rule 5


State 14

	Exp -> Exp . "<->" Exp                              (rule 1)
	Exp -> Exp "<->" Exp .                              (rule 1)
	Exp -> Exp . "->" Exp                               (rule 2)
	Exp -> Exp . "||" Exp                               (rule 3)
	Exp -> Exp . "&&" Exp                               (rule 4)

	")"            reduce using rule 1
	"&&"           shift, and enter state 7
	"||"           shift, and enter state 8
	"->"           shift, and enter state 9
	"<->"          reduce using rule 1
	%eof           reduce using rule 1


State 15

	Exp -> Exp . "<->" Exp                              (rule 1)
	Exp -> Exp . "->" Exp                               (rule 2)
	Exp -> Exp "->" Exp .                               (rule 2)
	Exp -> Exp . "||" Exp                               (rule 3)
	Exp -> Exp . "&&" Exp                               (rule 4)

	")"            reduce using rule 2
	"&&"           shift, and enter state 7
	"||"           shift, and enter state 8
	"->"           shift, and enter state 9
	"<->"          reduce using rule 2
	%eof           reduce using rule 2


State 16

	Exp -> Exp . "<->" Exp                              (rule 1)
	Exp -> Exp . "->" Exp                               (rule 2)
	Exp -> Exp . "||" Exp                               (rule 3)
	Exp -> Exp "||" Exp .                               (rule 3)
	Exp -> Exp . "&&" Exp                               (rule 4)

	")"            reduce using rule 3
	"&&"           shift, and enter state 7
	"||"           reduce using rule 3
	"->"           reduce using rule 3
	"<->"          reduce using rule 3
	%eof           reduce using rule 3


State 17

	Exp -> Exp . "<->" Exp                              (rule 1)
	Exp -> Exp . "->" Exp                               (rule 2)
	Exp -> Exp . "||" Exp                               (rule 3)
	Exp -> Exp . "&&" Exp                               (rule 4)
	Exp -> Exp "&&" Exp .                               (rule 4)

	")"            reduce using rule 4
	"&&"           reduce using rule 4
	"||"           reduce using rule 4
	"->"           reduce using rule 4
	"<->"          reduce using rule 4
	%eof           reduce using rule 4


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 8
Number of terminals: 8
Number of non-terminals: 2
Number of states: 18
