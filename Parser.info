-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.12 from Parser.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parse -> Exp                                (0)
	Exp -> Exp "<->" Implies                           (1)
	Exp -> Implies                                     (2)
	Implies -> Or "->" Implies                         (3)
	Implies -> Or                                      (4)
	Or -> Or "||" And                                  (5)
	Or -> And                                          (6)
	And -> And "&&" Not                                (7)
	And -> Not                                         (8)
	Not -> "!" Atom                                    (9)
	Not -> Atom                                        (10)
	Atom -> var                                        (11)
	Atom -> "(" Exp ")"                                (12)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	var            { VAR $$ }
	"("            { LPAR }
	")"            { RPAR }
	"&&"           { AND }
	"||"           { OR }
	"!"            { NEG }
	"->"           { IMP }
	"<->"          { BIC }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parse    rule  0
	Exp             rules 1, 2
	Implies         rules 3, 4
	Or              rules 5, 6
	And             rules 7, 8
	Not             rules 9, 10
	Atom            rules 11, 12

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	var            shift, and enter state 8
	"("            shift, and enter state 9
	"!"            shift, and enter state 10

	Exp            goto state 11
	Implies        goto state 3
	Or             goto state 4
	And            goto state 5
	Not            goto state 6
	Atom           goto state 7

State 1


	var            shift, and enter state 8
	"("            shift, and enter state 9
	"!"            shift, and enter state 10

	Exp            goto state 2
	Implies        goto state 3
	Or             goto state 4
	And            goto state 5
	Not            goto state 6
	Atom           goto state 7

State 2

	Exp -> Exp . "<->" Implies                          (rule 1)

	"<->"          shift, and enter state 12


State 3

	Exp -> Implies .                                    (rule 2)

	")"            reduce using rule 2
	"<->"          reduce using rule 2
	%eof           reduce using rule 2


State 4

	Implies -> Or . "->" Implies                        (rule 3)
	Implies -> Or .                                     (rule 4)
	Or -> Or . "||" And                                 (rule 5)

	")"            reduce using rule 4
	"||"           shift, and enter state 16
	"->"           shift, and enter state 17
	"<->"          reduce using rule 4
	%eof           reduce using rule 4


State 5

	Or -> And .                                         (rule 6)
	And -> And . "&&" Not                               (rule 7)

	")"            reduce using rule 6
	"&&"           shift, and enter state 15
	"||"           reduce using rule 6
	"->"           reduce using rule 6
	"<->"          reduce using rule 6
	%eof           reduce using rule 6


State 6

	And -> Not .                                        (rule 8)

	")"            reduce using rule 8
	"&&"           reduce using rule 8
	"||"           reduce using rule 8
	"->"           reduce using rule 8
	"<->"          reduce using rule 8
	%eof           reduce using rule 8


State 7

	Not -> Atom .                                       (rule 10)

	")"            reduce using rule 10
	"&&"           reduce using rule 10
	"||"           reduce using rule 10
	"->"           reduce using rule 10
	"<->"          reduce using rule 10
	%eof           reduce using rule 10


State 8

	Atom -> var .                                       (rule 11)

	")"            reduce using rule 11
	"&&"           reduce using rule 11
	"||"           reduce using rule 11
	"->"           reduce using rule 11
	"<->"          reduce using rule 11
	%eof           reduce using rule 11


State 9

	Atom -> "(" . Exp ")"                               (rule 12)

	var            shift, and enter state 8
	"("            shift, and enter state 9
	"!"            shift, and enter state 10

	Exp            goto state 14
	Implies        goto state 3
	Or             goto state 4
	And            goto state 5
	Not            goto state 6
	Atom           goto state 7

State 10

	Not -> "!" . Atom                                   (rule 9)

	var            shift, and enter state 8
	"("            shift, and enter state 9

	Atom           goto state 13

State 11

	%start_parse -> Exp .                               (rule 0)
	Exp -> Exp . "<->" Implies                          (rule 1)

	"<->"          shift, and enter state 12
	%eof           accept


State 12

	Exp -> Exp "<->" . Implies                          (rule 1)

	var            shift, and enter state 8
	"("            shift, and enter state 9
	"!"            shift, and enter state 10

	Implies        goto state 22
	Or             goto state 4
	And            goto state 5
	Not            goto state 6
	Atom           goto state 7

State 13

	Not -> "!" Atom .                                   (rule 9)

	")"            reduce using rule 9
	"&&"           reduce using rule 9
	"||"           reduce using rule 9
	"->"           reduce using rule 9
	"<->"          reduce using rule 9
	%eof           reduce using rule 9


State 14

	Exp -> Exp . "<->" Implies                          (rule 1)
	Atom -> "(" Exp . ")"                               (rule 12)

	")"            shift, and enter state 21
	"<->"          shift, and enter state 12


State 15

	And -> And "&&" . Not                               (rule 7)

	var            shift, and enter state 8
	"("            shift, and enter state 9
	"!"            shift, and enter state 10

	Not            goto state 20
	Atom           goto state 7

State 16

	Or -> Or "||" . And                                 (rule 5)

	var            shift, and enter state 8
	"("            shift, and enter state 9
	"!"            shift, and enter state 10

	And            goto state 19
	Not            goto state 6
	Atom           goto state 7

State 17

	Implies -> Or "->" . Implies                        (rule 3)

	var            shift, and enter state 8
	"("            shift, and enter state 9
	"!"            shift, and enter state 10

	Implies        goto state 18
	Or             goto state 4
	And            goto state 5
	Not            goto state 6
	Atom           goto state 7

State 18

	Implies -> Or "->" Implies .                        (rule 3)

	")"            reduce using rule 3
	"<->"          reduce using rule 3
	%eof           reduce using rule 3


State 19

	Or -> Or "||" And .                                 (rule 5)
	And -> And . "&&" Not                               (rule 7)

	")"            reduce using rule 5
	"&&"           shift, and enter state 15
	"||"           reduce using rule 5
	"->"           reduce using rule 5
	"<->"          reduce using rule 5
	%eof           reduce using rule 5


State 20

	And -> And "&&" Not .                               (rule 7)

	")"            reduce using rule 7
	"&&"           reduce using rule 7
	"||"           reduce using rule 7
	"->"           reduce using rule 7
	"<->"          reduce using rule 7
	%eof           reduce using rule 7


State 21

	Atom -> "(" Exp ")" .                               (rule 12)

	")"            reduce using rule 12
	"&&"           reduce using rule 12
	"||"           reduce using rule 12
	"->"           reduce using rule 12
	"<->"          reduce using rule 12
	%eof           reduce using rule 12


State 22

	Exp -> Exp "<->" Implies .                          (rule 1)

	")"            reduce using rule 1
	"<->"          reduce using rule 1
	%eof           reduce using rule 1


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 13
Number of terminals: 8
Number of non-terminals: 7
Number of states: 23
